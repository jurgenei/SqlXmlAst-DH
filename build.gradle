plugins { 
  id "com.marklogic.ml-gradle" version "3.16.0"
}

repositories {
	jcenter()

	// Needed for some mlcp dependencies, such as commons-csv:1.5.1-marklogic
	maven { url "http://developer.marklogic.com/maven2/" }
}


configurations {
	mlcp
}

dependencies {
	mlcp "com.marklogic:mlcp:10.0.3"

	/**
	 * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
	 * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
	 * mlcp include a directory or some other resource that provides a log4j.properties file.
	 */
	mlcp files("lib")
}



task importSDP(type: com.marklogic.gradle.task.MlcpTask) {
	output_uri_replace = ".*sdp\\.zip/,'oracle/sdp/'"
	output_collections = "oracle.sdp"
	input_file_path    = "../SqlXmlLin/build/zipml/sdp.zip"
	
	classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	output_permissions = "rest-reader,read,rest-writer,update"
	input_compressed   = "true"
}

task importDSA(type: com.marklogic.gradle.task.MlcpTask) {
	output_uri_replace = ".*dsa\\.zip/,'oracle/dsa/'"
	output_collections = "oracle.dsa"
	input_file_path    = "../SqlXmlLin/build/zipml/dsa.zip"
	
    classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	output_permissions = "rest-reader,read,rest-writer,update"
	input_compressed   = "true"
}

task importBUSS(type: com.marklogic.gradle.task.MlcpTask) {
	output_uri_replace = ".*buss\\.zip/,'oracle/buss/'"
	output_collections = "oracle.buss"
	input_file_path    = "../SqlXmlLin/build/zipml/buss.zip"
	
    classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	output_permissions = "rest-reader,read,rest-writer,update"
	input_compressed   = "true"
}

task importcons(type: com.marklogic.gradle.task.MlcpTask) {
	output_uri_replace = ".*cons\\.zip/,'oracle/cons/'"
	output_collections = "oracle.cons"
	input_file_path    = "../SqlXmlLin/build/zipml/cons.zip"
	
    classpath = configurations.mlcp
	command = "IMPORT"
	database = mlAppConfig.contentDatabaseName
	output_permissions = "rest-reader,read,rest-writer,update"
	input_compressed   = "true"
}





